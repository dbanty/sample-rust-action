name: sample-rust-action
description: An example GitHub Action written in Rust, generated from [dbanty/rust-github-action-template](https://github.com/dbanty/rust-github-action-template). You can either use this GitHub template and customize it yourself, or `cargo generate dbanty/rust-github-action-template` to create a new repo from this template. Any issues should be opened in the upstream template.
author: Dylan Anthony <dbanty@users.noreply.github.com>
inputs:
  error:
    description: 'The error message to display, if any'
    required: false
    default: ''
  token:
    description: 'The GitHub token to use for downloading the action, defaults to workflow token'
    required: true
    default: ${{ github.token }}
outputs:
  error:
    value: ${{ steps.run.outputs.error }}
    description: 'The description of any error that occurred'
runs:
  using: 'composite'
  steps:
    - name: Set reusable variables
      shell: bash
      run: |
        echo "action_name=sample-rust-action" >> $GITHUB_ENV
        echo "action_org=dbanty" >> $GITHUB_ENV

    - name: Get Action Version
      id: get_action_version
      shell: pwsh
      run: |
        $finalComponent = Split-Path -Leaf ${{ github.action_path }}
        if ($finalComponent -eq ${{ env.action_name }}) {
          $version = ""
        } else {
          $version = $finalComponent
        }
        Write-Output "version=$version" >> $Env:GITHUB_OUTPUT

    - name: Download Action
      shell: bash
      run: |
        gh release download ${{ steps.get_action_version.outputs.version }} --repo ${{ env.action_org }}/${{ env.action_name }} --pattern '${{ runner.os }}.tgz'
        tar -xzf ${{ runner.os }}.tgz
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Set Binary Name
      shell: bash
      run: echo "binary_name=$(if [[ ${{ runner.os }} == 'Windows' ]]; then echo '${{ env.action_name }}.exe'; else echo '${{ env.action_name }}'; fi)" >> $GITHUB_ENV

    - name: Run Action
      shell: bash
      id: run
      run: ./${{ runner.os }}/${{ env.binary_name }} "${{ inputs.error }}"
